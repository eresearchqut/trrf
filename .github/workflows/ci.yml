name: Continuous Integration
on:
  push:
    branches:
      - master
      - next_release
  pull_request:
    branches:
      - next_release
env:
  OWNER: eresearchqut

jobs:
  build_images:
    name: Build images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Make images dir
        run: mkdir /tmp/build_images
      - name: Build django image
        run: docker build -t $OWNER/runserver:$GITHUB_SHA . -f docker/dev/Dockerfile
      - name: Save django image to file
        run: docker save $OWNER/runserver:$GITHUB_SHA -o /tmp/build_images/django_image.tar.gz
      - name: Build node image
        run: docker build -t $OWNER/nodeserver:$GITHUB_SHA . -f docker/dev/Dockerfile-node
      - name: Save node image to file
        run: docker save $OWNER/nodeserver:$GITHUB_SHA -o /tmp/build_images/node_image.tar.gz
      - name: Upload images
        uses: actions/upload-artifact@v2
        with:
          name: build_images
          path: /tmp/build_images

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build_images
    steps:
      - uses: actions/checkout@v2
      - run: |
          touch .env_local
          echo "TRRF_IMAGE_NAME=$OWNER/runserver:$GITHUB_SHA" >> $GITHUB_ENV
          echo "NODE_IMAGE_NAME=$OWNER/nodeserver:$GITHUB_SHA" >> $GITHUB_ENV
      - name: Download images
        uses: actions/download-artifact@v2
        with:
          name: build_images
          path: /tmp/build_images
      - name: Load node image
        run: docker load -i /tmp/build_images/node_image.tar.gz
      - name: Flake8 linting
        run: ./scripts/lint.sh

  migration_check:
    name: Check migrations
    runs-on: ubuntu-latest
    needs: build_images
    steps:
      - uses: actions/checkout@v2
      - run: |
          touch .env_local
          echo "TRRF_IMAGE_NAME=$OWNER/runserver:$GITHUB_SHA" >> $GITHUB_ENV
          echo "NODE_IMAGE_NAME=$OWNER/nodeserver:$GITHUB_SHA" >> $GITHUB_ENV
      - name: Download images
        uses: actions/download-artifact@v2
        with:
          name: build_images
          path: /tmp/build_images
      - name: Load django image
        run: docker load -i /tmp/build_images/django_image.tar.gz
      - name: Load node image
        run: docker load -i /tmp/build_images/node_image.tar.gz
      - name: Django migrations check
        run: ./scripts/check-migrations.sh

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: build_images
    steps:
      - uses: actions/checkout@v2
      - run: |
          touch .env_local
          echo "TRRF_IMAGE_NAME=$OWNER/runserver:$GITHUB_SHA" >> $GITHUB_ENV
          echo "NODE_IMAGE_NAME=$OWNER/nodeserver:$GITHUB_SHA" >> $GITHUB_ENV
      - name: Download images
        uses: actions/download-artifact@v2
        with:
          name: build_images
          path: /tmp/build_images
      - name: Load django image
        run: docker load -i /tmp/build_images/django_image.tar.gz
      - name: Load node image
        run: docker load -i /tmp/build_images/node_image.tar.gz
      - name: Unit tests
        run: ./scripts/unit-tests-coverage.sh
      - name: Upload test coverage
        uses: actions/upload-artifact@v2
        with:
          name: Unittest coverage
          path: data/test/unittest_coverage_report

  integration_tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: build_images
    steps:
      - uses: actions/checkout@v2
      - run: |
          touch .env_local
          echo "TRRF_IMAGE_NAME=$OWNER/runserver:$GITHUB_SHA" >> $GITHUB_ENV
          echo "NODE_IMAGE_NAME=$OWNER/nodeserver:$GITHUB_SHA" >> $GITHUB_ENV
      - name: Download images
        uses: actions/download-artifact@v2
        with:
          name: build_images
          path: /tmp/build_images
      - name: Load django image
        run: docker load -i /tmp/build_images/django_image.tar.gz
      - name: Load node image
        run: docker load -i /tmp/build_images/node_image.tar.gz
      - name: Create log dir
        run: mkdir -p data/aloe/dev
      - name: Integration tests
        run: ./scripts/end2end-tests.sh
      - name: Tar test output
        if: ${{ always() }}
        run: tar -cvf aloe-results.tar data/aloe/dev
      - name: Upload test output
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: Aloe output
          path: aloe-results.tar

  system_checks:
    name: System checks
    runs-on: ubuntu-latest
    needs: build_images
    steps:
      - uses: actions/checkout@v2
      - run: |
          touch .env_local
          echo "TRRF_IMAGE_NAME=$OWNER/runserver:$GITHUB_SHA" >> $GITHUB_ENV
          echo "NODE_IMAGE_NAME=$OWNER/nodeserver:$GITHUB_SHA" >> $GITHUB_ENV
      - name: Download images
        uses: actions/download-artifact@v2
        with:
          name: build_images
          path: /tmp/build_images
      - name: Load django image
        run: docker load -i /tmp/build_images/django_image.tar.gz
      - name: Load node image
        run: docker load -i /tmp/build_images/node_image.tar.gz
      - name: Django checks
        run: ./scripts/django-checks.sh
