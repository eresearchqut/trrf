# Generated by Django 2.2.9 on 2020-01-07 15:34

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import re



def load_groups(apps, schema_editor):
    # call_command("loaddata", "initial_groups.json", exceptiononerror=True)
    pass


class Migration(migrations.Migration):

    replaces = [('groups', '0001_initial'), ('groups', '0002_auto_20150828_1519'), ('groups', '0003_auto_20150831_1321'), ('groups', '0004_auto_20151026_1552'), ('groups', '0005_customuser_password_change_date'), ('groups', '0006_auto_20160208_1606'), ('groups', '0007_customuser_more_relaxed_validation'), ('groups', '0008_customuser_preferred_language'), ('groups', '0009_auto_20170711_1550'), ('groups', '0010_customuser_prevent_self_unlock'), ('groups', '0011_customuser_require_2_fact_auth'), ('groups', '0012_auto_20181220_1457'), ('groups', '0013_customuser_ethically_cleared')]

    initial = True

    dependencies = [
        ('rdrf', '0001_squashed_0118_clinical_data_created_updated_ts'),
        ('auth', '0006_require_contenttypes_0002'),
    ]

    operations = [
        migrations.CreateModel(
            name='WorkingGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('registry', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
            ],
            options={
                'ordering': ['registry__code'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('title', models.CharField(max_length=50, null=True, verbose_name='position')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('registry', models.ManyToManyField(related_name='registry', to='rdrf.Registry')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('working_groups', models.ManyToManyField(null=True, related_name='working_groups', to='groups.WorkingGroup')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RunPython(
            code=load_groups,
        ),
        migrations.AlterModelOptions(
            name='customuser',
            options={},
        ),
        migrations.AlterField(
            model_name='customuser',
            name='email',
            field=models.EmailField(max_length=254, verbose_name='email address'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='first_name',
            field=models.CharField(max_length=30, verbose_name='first name'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='is_active',
            field=models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='last_name',
            field=models.CharField(max_length=30, verbose_name='last name'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='username',
            field=models.CharField(help_text='Required. 254 characters or fewer. Letters, numbers and @/./+/-/_ characters', max_length=254, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w.@+-]+$'), 'Enter a valid username.', 'invalid')], verbose_name='username'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='working_groups',
            field=models.ManyToManyField(related_name='working_groups', to='groups.WorkingGroup'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='password_change_date',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='registry',
            field=models.ManyToManyField(blank=True, related_name='registry', to='rdrf.Registry'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='title',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='position'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='working_groups',
            field=models.ManyToManyField(blank=True, related_name='working_groups', to='groups.WorkingGroup'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='preferred_language',
            field=models.CharField(default='en', help_text='Preferred language (code) for communications', max_length=20, verbose_name='preferred language'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='prevent_self_unlock',
            field=models.BooleanField(default=False, help_text='Explicitly prevent this user to unlock their account using the Unlock Account functionality.', verbose_name='prevent self unlock'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='require_2_fact_auth',
            field=models.BooleanField(default=False, help_text='Requires this user to use two factor authentication to access the system.', verbose_name='require two-factor authentication'),
        ),
        migrations.AlterField(
            model_name='workinggroup',
            name='registry',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='rdrf.Registry'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='ethically_cleared',
            field=models.BooleanField(default=False),
        ),
    ]
