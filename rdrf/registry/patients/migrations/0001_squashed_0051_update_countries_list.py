# Generated by Django 2.2.9 on 2020-01-07 15:38
# -*- coding: utf-8 -*-
from __future__ import unicode_literals


import base64
import json
import logging
import random
import os.path

from django.conf import settings
import django.core.files.storage
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import registry.patients.models
import simple_history.models

from registry.patients.constants import PatientState
from rdrf.helpers.registry_features import RegistryFeatures

logger = logging.getLogger(__name__)



def fix_patient_relative_sex(apps, schema_editor):
    patient_relative_model_class = apps.get_model("patients", "PatientRelative")
    for patient_relative in patient_relative_model_class.objects.all():
        if patient_relative.sex == "M":
            patient_relative.sex = "1"
        elif patient_relative.sex == "F":
            patient_relative.sex = "2"
        elif patient_relative.sex == "X":
            patient_relative.sex = "3"

        try:
            patient_relative.save()
        except Exception as ex:
            print("could not update PatientRelative pk=%s: %s" % (patient_relative.pk, ex))


forward_map = {
    "M": "1",
    "F": "2",
    "I": "3"
}

backward_map = {
    "1": "M",
    "2": "F",
    "3": "I"
}


def update_gender(pg, forward=True):
    if forward:
        m = forward_map
    else:
        m = backward_map

    updated_value = m.get(pg.gender, None)
    if updated_value:
        pg.gender = updated_value
        pg.save()
    else:
        print("Could not map ParentGuardian gender for %s" % pg)


def forwards_func(apps, schema_editor):
    ParentGuardian = apps.get_model("patients", "ParentGuardian")
    for pg in ParentGuardian.objects.all():
        update_gender(pg)


def backwards_func():
    ParentGuardian = apps.get_model("patients", "ParentGuardian")
    for pg in ParentGuardian.objects.all():
        update_gender(pg, forward=False)

def default_filename(apps, schema_editor):
    PatientConsent = apps.get_model("patients", "PatientConsent")
    for pc in PatientConsent.objects.all():
        if not pc.filename:
            pc.filename = os.path.basename(pc.form.name)
            pc.save()


def clear_filename(apps, schema_editor):
    PatientConsent = apps.get_model("patients", "PatientConsent")
    PatientConsent.objects.all().update(filename="")


def encode_signatures(apps, schema_editor):
    PatientSignature = apps.get_model('patients', 'PatientSignature')
    for row in PatientSignature.objects.all():
        signature = row.signature
        row.signature = base64.b64encode(signature.encode('utf-8')).decode('utf-8')
        row.save()


def has_stages_feature(registry):
    metadata = {}
    if registry.metadata_json:
        try:
            metadata = json.loads(registry.metadata_json)
        except Exception:
            pass
    if "features" in metadata:
        return RegistryFeatures.STAGES in metadata["features"]
    else:
        return False


def applicable_to(apps, section, patient):
    if patient is None:
        return True
    if not section.applicability_condition:
            return True

    ParentGuardian = apps.get_model('patients', 'ParentGuardian')    
    self_patient = False
    try:
        ParentGuardian.objects.get(self_patient=patient)
        self_patient = True
    except ParentGuardian.DoesNotExist:
        pass

    function_context = {"patient": patient, "self_patient": self_patient}

    return eval(
        section.applicability_condition, {"__builtins__": None}, function_context
    )


def did_patient_provided_all_consent(apps, registry, patient):
    ConsentSection = apps.get_model('rdrf', 'ConsentSection')
    ConsentQuestion = apps.get_model('rdrf', 'ConsentQuestion')
    ConsentValue = apps.get_model('patients', 'ConsentValue')

    consent_questions = [q for sec in ConsentSection.objects.filter(registry=registry) if applicable_to(apps, sec, patient) for q in sec.questions.all()]

    def consent_answer(question):
        try:
            return ConsentValue.objects.get(patient=patient, consent_question=question).answer
        except ConsentValue.DoesNotExist:
            return False

    return all(consent_answer(q) for q in consent_questions)


def set_rules(apps, schema_editor):
    PatientStage = apps.get_model('patients', 'PatientStage')
    PatientStageRule = apps.get_model('patients', 'PatientStageRule')
    Patient = apps.get_model('patients', 'Patient')
    Registry = apps.get_model('rdrf', 'Registry')

    informed_consent = PatientStage.objects.filter(name='Informed Consent').first()
    eligibility = PatientStage.objects.filter(name='Eligibility').first()
    if informed_consent and eligibility:
        for reg in Registry.objects.all():
            if has_stages_feature(reg):
                PatientStageRule.objects.create(
                    registry=reg,
                    from_stage=None,
                    condition=PatientState.REGISTERED,
                    to_stage=informed_consent,
                    order=1
                )
                PatientStageRule.objects.create(
                    registry=reg,
                    from_stage=informed_consent,
                    condition=PatientState.CONSENTED,
                    to_stage=eligibility,
                    order=1
                )
                all_patients = Patient.objects.filter(rdrf_registry=reg)
                logger.info(f"Patients count for registry {reg}: {len(all_patients)} ")
                for patient in all_patients:
                    rule = PatientStageRule.objects.filter(condition=PatientState.REGISTERED, from_stage__isnull=True).first()
                    if rule:
                        logger.info(f"Apply {PatientState.REGISTERED} rule to {patient}")
                        patient.stage = rule.to_stage
                        patient.save()
                        if did_patient_provided_all_consent(apps, reg, patient):
                            rule = PatientStageRule.objects.filter(condition=PatientState.CONSENTED, from_stage=patient.stage).first()
                            if rule:
                                logger.info(f"Apply {PatientState.CONSENTED} rule to {patient}")
                                patient.stage = rule.to_stage
                                patient.save()


def has_guid_feature(registry):
    metadata = {}
    if registry.metadata_json:
        try:
            metadata = json.loads(registry.metadata_json)
        except Exception:
            pass
    if "features" in metadata:
        return RegistryFeatures.PATIENT_GUID in metadata["features"]
    else:
        return False

def randomString(letters, length):
    return ''.join(random.choice(letters) for i in range(length))

def randomGUID():
    return randomString('ABCDEFGHJKLMNPRSTUVXYZ', 6) + randomString('123456789', 4)


def set_patients_guid(apps, schema_editor):
    Patient = apps.get_model('patients', 'Patient')
    PatientGUID = apps.get_model('patients', 'PatientGUID')
    Registry = apps.get_model('rdrf', 'Registry')
    for p in Patient.objects.all():
        has_guid = any(has_guid_feature(r) for r in p.rdrf_registry.all())
        if has_guid and not PatientGUID.objects.filter(patient=p).exists():
            PatientGUID.objects.create(patient=p, guid=randomGUID())


def set_registry_for_patient_stages(apps, schema_editor):
    PatientStage = apps.get_model('patients', 'PatientStage')
    PatientStageRule = apps.get_model('patients', 'PatientStageRule')
    Registry = apps.get_model('rdrf', 'Registry')
    Patient = apps.get_model('patients', 'Patient')

    registry_stages_dict = {}
    stages_to_migrate_qs = PatientStage.objects.filter(registry__isnull=True)
    for reg in Registry.objects.all():
        if has_stages_feature(reg):
            new_stages_dict = {}
            for stage in stages_to_migrate_qs:
                new_stage = PatientStage.objects.create(
                    name=stage.name,
                    registry=reg
                )
                new_stages_dict[stage.id] = new_stage
            for stage in stages_to_migrate_qs:
                new_stage = new_stages_dict[stage.id]
                for next_stage in stage.allowed_next_stages.all():
                    new_stage.allowed_next_stages.add(new_stages_dict[next_stage.id])
                for prev_stage in stage.allowed_prev_stages.all():
                    new_stage.allowed_prev_stages.add(new_stages_dict[prev_stage.id])
            registry_stages_dict[reg.id] = new_stages_dict
    
    for patient in Patient.objects.exclude(stage__isnull=True):
        registry_model = patient.rdrf_registry.first()
        if registry_model.id in registry_stages_dict:
            new_stages_dict = registry_stages_dict[registry_model.id]
            patient.stage = new_stages_dict[patient.stage.id]
            patient.save()
    
    for rule in PatientStageRule.objects.all():
        if rule.registry and rule.registry.id in registry_stages_dict:
            new_stages_dict = registry_stages_dict[rule.registry.id]
            modified = False
            if rule.from_stage:
                rule.from_stage = new_stages_dict[rule.from_stage.id]
                modified = True
            if rule.to_stage:
                rule.to_stage = new_stages_dict[rule.to_stage.id]
                modified = True
            if modified:
                rule.save()

    stages_to_migrate_qs.delete()


class Migration(migrations.Migration):

    replaces = [('patients', '0001_initial'), ('patients', '0002_auto_20150828_1519'), ('patients', '0003_auto_20150908_1410'), ('patients', '0004_auto_20150908_1637'), ('patients', '0005_auto_20150915_1518'), ('patients', '0006_doctor_sex'), ('patients', '0007_auto_20150915_1546'), ('patients', '0008_auto_20150916_1518'), ('patients', '0009_auto_20150911_1128'), ('patients', '0010_auto_20151026_1246'), ('patients', '0011_parentguardian_phone'), ('patients', '0012_auto_20160530_1356'), ('patients', '0013_auto_20160604_2245'), ('patients', '0014_auto_20160708_1011'), ('patients', '0015_auto_20160711_2209'), ('patients', '0016_patientconsent_filename'), ('patients', '0017_patientconsent_filename'), ('patients', '0016_auto_20160916_1545'), ('patients', '0018_merge'), ('patients', '0019_auto_20161013_1259'), ('patients', '0020_archivedpatient'), ('patients', '0021_auto_20170220_1537'), ('patients', '0022_patient_date_of_migration'), ('patients', '0023_auto_20170410_1101'), ('patients', '0024_patient_patient_type'), ('patients', '0025_auto_20171025_1256'), ('patients', '0026_clinicianother_user'), ('patients', '0027_auto_20180116_1012'), ('patients', '0028_auto_20180117_1307'), ('patients', '0029_patient_date_of_death'), ('patients', '0030_auto_20181121_1502'), ('patients', '0031_auto_20181123_1221'), ('patients', '0032_auto_20181127_1421'), ('patients', '0033_auto_20181204_1156'), ('patients', '0034_auto_20181220_1457'), ('patients', '0035_demographic_audit_log'), ('patients', '0036_patients_stage'), ('patients', '0037_patient_label_updates'), ('patients', '0038_patient_consent_upload_to_change'), ('patients', '0039_patient_signature'), ('patients', '0040_signature_encoding'), ('patients', '0041_patient_stage_rule'), ('patients', '0042_patient_stage_rule_data_migration'), ('patients', '0043_patient_stage_rule_foreign_keys'), ('patients', '0044_patient_add_create_and_update_timestamps'), ('patients', '0045_patientguid'), ('patients', '0046_patient_guid_data_migration'), ('patients', '0047_patient_add_created_by'), ('patients', '0048_patientstage_registry'), ('patients', '0049_patient_stage_registry_data_migration'), ('patients', '0050_non-nullable-registry-for-patient-stage'), ('patients', '0051_update_countries_list')]

    initial = True

    dependencies = [
        ('rdrf', '0001_squashed_0118_clinical_data_created_updated_ts'),
        ('groups', '0001_squashed_0013_customuser_ethically_cleared'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AddressType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family_name', models.CharField(db_index=True, max_length=100)),
                ('given_names', models.CharField(db_index=True, max_length=100)),
                ('surgery_name', models.CharField(blank=True, max_length=100)),
                ('speciality', models.CharField(max_length=100)),
                ('address', models.TextField()),
                ('suburb', models.CharField(max_length=50, verbose_name='Suburb/Town')),
                ('phone', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
            ],
            options={
                'ordering': ['family_name'],
            },
        ),
        migrations.CreateModel(
            name='NextOfKinRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(max_length=100, verbose_name='Relationship')),
            ],
            options={
                'verbose_name': 'Next of Kin Relationship',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consent', models.BooleanField(help_text='The patient consents to be part of the registry and have data retained and shared in accordance with the information provided to them.', verbose_name='consent given')),
                ('consent_clinical_trials', models.BooleanField(default=False, help_text='Consent given to be contacted about clinical trials or other studies related to their condition.')),
                ('consent_sent_information', models.BooleanField(default=False, help_text='Consent given to be sent information on their condition', verbose_name='consent to be sent information given')),
                ('consent_provided_by_parent_guardian', models.BooleanField(default=False, help_text='Parent/Guardian consent provided on behalf of the patient.')),
                ('family_name', models.CharField(db_index=True, max_length=100)),
                ('given_names', models.CharField(db_index=True, max_length=100)),
                ('maiden_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Maiden Name (if applicable)')),
                ('umrn', models.CharField(blank=True, db_index=True, max_length=50, null=True, verbose_name='Hospital/Clinic ID')),
                ('date_of_birth', models.DateField()),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Place of birth')),
                ('country_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country of birth')),
                ('ethnic_origin', models.CharField(blank=True, choices=[('New Zealand European', 'New Zealand European'), ('Australian', 'Australian'), ('Other Caucasian/European', 'Other Caucasian/European'), ('Aboriginal', 'Aboriginal'), ('Person from the Torres Strait Islands', 'Person from the Torres Strait Islands'), ('Maori', 'Maori'), ('NZ European / Maori', 'NZ European / Maori'), ('Samoan', 'Samoan'), ('Cook Islands Maori', 'Cook Islands Maori'), ('Tongan', 'Tongan'), ('Niuean', 'Niuean'), ('Tokelauan', 'Tokelauan'), ('Fijian', 'Fijian'), ('Other Pacific Peoples', 'Other Pacific Peoples'), ('Southeast Asian', 'Southeast Asian'), ('Chinese', 'Chinese'), ('Indian', 'Indian'), ('Other Asian', 'Other Asian'), ('Middle Eastern', 'Middle Eastern'), ('Latin American', 'Latin American'), ('Black African/African American', 'Black African/African American'), ('Other Ethnicity', 'Other Ethnicity'), ('Decline to Answer', 'Decline to Answer')], max_length=100, null=True)),
                ('sex', models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1)),
                ('home_phone', models.CharField(blank=True, max_length=30, null=True)),
                ('mobile_phone', models.CharField(blank=True, max_length=30, null=True)),
                ('work_phone', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('next_of_kin_family_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='family name')),
                ('next_of_kin_given_names', models.CharField(blank=True, max_length=100, null=True, verbose_name='given names')),
                ('next_of_kin_address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('next_of_kin_suburb', models.CharField(blank=True, max_length=50, null=True, verbose_name='Suburb/Town')),
                ('next_of_kin_state', models.CharField(blank=True, max_length=20, null=True, verbose_name='State/Province/Territory')),
                ('next_of_kin_postcode', models.IntegerField(blank=True, null=True, verbose_name='Postcode')),
                ('next_of_kin_home_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='home phone')),
                ('next_of_kin_mobile_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='mobile phone')),
                ('next_of_kin_work_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='work phone')),
                ('next_of_kin_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email')),
                ('next_of_kin_parent_place_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Place of birth of parents')),
                ('next_of_kin_country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('active', models.BooleanField(default=True, help_text='Ticked if active in the registry, ie not a deleted record, or deceased patient.')),
                ('inactive_reason', models.TextField(blank=True, help_text='Please provide reason for deactivating the patient', null=True, verbose_name='Reason')),
                ('clinician', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['family_name', 'given_names', 'date_of_birth'],
                'verbose_name_plural': 'Patient List',
                'permissions': (('can_see_full_name', 'Can see Full Name column'), ('can_see_dob', 'Can see Date of Birth column'), ('can_see_working_groups', 'Can see Working Groups column'), ('can_see_diagnosis_progress', 'Can see Diagnosis Progress column'), ('can_see_diagnosis_currency', 'Can see Diagnosis Currency column'), ('can_see_genetic_data_map', 'Can see Genetic Module column'), ('can_see_data_modules', 'Can see Data Modules column')),
            },
        ),
        migrations.CreateModel(
            name='PatientAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField()),
                ('suburb', models.CharField(max_length=100, verbose_name='Suburb/Town')),
                ('state', models.CharField(max_length=50, verbose_name='State/Province/Territory')),
                ('postcode', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=100)),
                ('address_type', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='patients.AddressType')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patients.Patient')),
            ],
            options={
                'verbose_name_plural': 'Patient Addresses',
            },
        ),
        migrations.CreateModel(
            name='PatientConsent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form', models.FileField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/static/media/', location='/data/static/media'), upload_to='consents', verbose_name='Consent form')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patients.Patient')),
            ],
        ),
        migrations.CreateModel(
            name='PatientDoctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(max_length=50)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patients.Doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patients.Patient')),
            ],
            options={
                'verbose_name': 'medical professionals for patient',
                'verbose_name_plural': 'medical professionals for patient',
            },
        ),
        migrations.CreateModel(
            name='PatientRelative',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family_name', models.CharField(max_length=100)),
                ('given_names', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('X', 'Other/Intersex')], max_length=1)),
                ('relationship', models.CharField(choices=[('Parent', 'Parent'), ('Sibling', 'Sibling'), ('Child', 'Child'), ('Identical Twin', 'Identical Twin'), ('Half Sibling', 'Half Sibling'), ('Niece/Nephew', 'Niece/Nephew'), ('1st Cousin', '1st Cousin'), ('Grandchild', 'Grandchild'), ('Uncle/Aunty', 'Uncle/Aunty'), ('Spouse', 'Spouse'), ('Non-identical twin', 'Non-identical twin'), ('Grandparent', 'Grandparent'), ('1st cousin once removed', '1st cousin once removed'), ('Great Grandparent', 'Great Grandparent'), ('Great Grandchild', 'Great Grandchild'), ('Great Uncle/Aunt', 'Great Uncle/Aunt'), ('Great Niece/Nephew', 'Great Niece/Nephew'), ('Unknown', 'Unknown'), ('Other', 'Other')], max_length=80)),
                ('location', models.CharField(choices=[('AU - WA', 'Australia - WA'), ('AU - SA', 'Australia - SA'), ('AU - NSW', 'Australia - NSW'), ('AU - QLD', 'Australia - QLD'), ('AU - NT', 'Australia - NT'), ('AU - VIC', 'Australia - VIC'), ('AU - TAS', 'Australia - TAS'), ('NZ', 'New Zealand'), ('AF', 'Afghanistan'), ('AX', 'Åland Islands'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('CI', "Côte d'Ivoire"), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine, State of'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], max_length=80)),
                ('living_status', models.CharField(choices=[('Alive', 'Living'), ('Deceased', 'Deceased')], max_length=80)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relatives', to='patients.Patient')),
                ('relative_patient', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='as_a_relative', to='patients.Patient', verbose_name='Create Patient?')),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('short_name', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30)),
                ('country_code', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='patient',
            name='doctors',
            field=models.ManyToManyField(through='patients.PatientDoctor', to='patients.Doctor'),
        ),
        migrations.AddField(
            model_name='patient',
            name='next_of_kin_relationship',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.NextOfKinRelationship', verbose_name='Relationship'),
        ),
        migrations.AddField(
            model_name='patient',
            name='rdrf_registry',
            field=models.ManyToManyField(to='rdrf.Registry'),
        ),
        migrations.AddField(
            model_name='patient',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_object', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='patient',
            name='working_groups',
            field=models.ManyToManyField(related_name='my_patients', to='groups.WorkingGroup', verbose_name='Centre'),
        ),
        migrations.CreateModel(
            name='ParentGuardian',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=50)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Place of birth')),
                ('date_of_migration', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('address', models.TextField()),
                ('suburb', models.CharField(max_length=50, verbose_name='Suburb/Town')),
                ('state', models.CharField(max_length=20, verbose_name='State/Province/Territory')),
                ('postcode', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(max_length=20)),
                ('patient', models.ManyToManyField(to='patients.Patient')),
                ('self_patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='self_patient', to='patients.Patient')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parent_user_object', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='doctor',
            name='state',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='patients.State', verbose_name='State/Province/Territory'),
        ),
        migrations.CreateModel(
            name='ConsentValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.BooleanField(default=False)),
                ('first_save', models.DateField(blank=True, null=True)),
                ('last_update', models.DateField(blank=True, null=True)),
                ('consent_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.ConsentQuestion')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consents', to='patients.Patient')),
            ],
        ),
        migrations.RunPython(
            code=fix_patient_relative_sex,
        ),
        migrations.AddField(
            model_name='patient',
            name='living_status',
            field=models.CharField(choices=[('Alive', 'Living'), ('Deceased', 'Deceased')], default='Alive', max_length=80),
        ),
        migrations.AlterField(
            model_name='patientrelative',
            name='sex',
            field=models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1),
        ),
        migrations.AddField(
            model_name='doctor',
            name='fax',
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='doctor',
            name='postcode',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='doctor',
            name='title',
            field=models.CharField(blank=True, max_length=4, null=True),
        ),
        migrations.AddField(
            model_name='doctor',
            name='sex',
            field=models.CharField(blank=True, choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1, null=True),
        ),
        migrations.AlterField(
            model_name='doctor',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.State', verbose_name='State/Province/Territory'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='maiden_name',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='Maiden name (if applicable)'),
        ),
        migrations.AlterField(
            model_name='parentguardian',
            name='gender',
            field=models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('I', 'Indeterminate')], max_length=1),
        ),
        migrations.AlterField(
            model_name='patientrelative',
            name='relationship',
            field=models.CharField(choices=[('Parent (1st degree)', 'Parent (1st degree)'), ('Child (1st degree)', 'Child (1st degree)'), ('Sibling (1st degree)', 'Sibling (1st degree)'), ('Identical Twin (0th degree)', 'Identical Twin (0th degree)'), ('Non-identical Twin (1st degree)', 'Non-identical Twin (1st degree)'), ('Half Sibling (1st degree)', 'Half Sibling (1st degree)'), ('Grandparent (2nd degree)', 'Grandparent (2nd degree)'), ('Grandchild (2nd degree)', 'Grandchild (2nd degree)'), ('Uncle/Aunt (2nd degree)', 'Uncle/Aunt (2nd degree)'), ('Niece/Nephew (2nd degree)', 'Niece/Nephew (2nd degree)'), ('1st Cousin (3rd degree)', '1st Cousin (3rd degree)'), ('Great Grandparent (3rd degree)', 'Great Grandparent (3rd degree)'), ('Great Grandchild (3rd degree)', 'Great Grandchild (3rd degree)'), ('Great Uncle/Aunt (3rd degree)', 'Great Uncle/Aunt (3rd degree)'), ('Grand Niece/Nephew (3rd degree)', 'Grand Niece/Nephew (3rd degree)'), ('1st Cousin once removed (4th degree)', '1st Cousin once removed (4th degree)'), ('Spouse', 'Spouse'), ('Unknown', 'Unknown'), ('Other', 'Other')], max_length=80),
        ),
        migrations.AddField(
            model_name='parentguardian',
            name='phone',
            field=models.CharField(blank=True, max_length=20),
        ),
        migrations.CreateModel(
            name='ClinicianOther',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clinician_name', models.CharField(max_length=200, null=True)),
                ('clinician_hospital', models.CharField(max_length=200, null=True)),
                ('clinician_address', models.CharField(max_length=200, null=True)),
                ('patient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.Patient')),
                ('clinician_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('clinician_phone_number', models.CharField(blank=True, max_length=254, null=True)),
            ],
        ),
        migrations.AlterField(
            model_name='patient',
            name='rdrf_registry',
            field=models.ManyToManyField(related_name='patients', to='rdrf.Registry'),
        ),
        migrations.AlterField(
            model_name='addresstype',
            name='type',
            field=models.CharField(max_length=100, unique=True),
        ),
        migrations.AlterField(
            model_name='patientconsent',
            name='form',
            field=models.FileField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(), upload_to='consents', verbose_name='Consent form'),
        ),
        migrations.AlterField(
            model_name='doctor',
            name='family_name',
            field=models.CharField(db_index=True, max_length=100, verbose_name='Family/Last name'),
        ),
        migrations.AlterField(
            model_name='doctor',
            name='given_names',
            field=models.CharField(db_index=True, max_length=100, verbose_name='Given/First names'),
        ),
        migrations.AlterField(
            model_name='doctor',
            name='suburb',
            field=models.CharField(max_length=50, verbose_name='Suburb/Town/City'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='next_of_kin_suburb',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Suburb/Town/City'),
        ),
        migrations.AddField(
            model_name='patientconsent',
            name='filename',
            field=models.CharField(default='', max_length=255),
            preserve_default=False,
        ),
        migrations.RunPython(
            code=default_filename,
            reverse_code=clear_filename,
        ),
        migrations.AlterField(
            model_name='parentguardian',
            name='gender',
            field=models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1),
        ),
        migrations.RunPython(
            code=forwards_func,
            reverse_code=backwards_func,
        ),
        migrations.AlterField(
            model_name='patientrelative',
            name='location',
            field=models.CharField(choices=[('AU - WA', 'Australia - WA'), ('AU - SA', 'Australia - SA'), ('AU - NSW', 'Australia - NSW'), ('AU - QLD', 'Australia - QLD'), ('AU - NT', 'Australia - NT'), ('AU - VIC', 'Australia - VIC'), ('AU - TAS', 'Australia - TAS'), ('NZ', 'New Zealand'), ('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('CI', "Côte d'Ivoire"), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine, State of'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'), ('AX', 'Åland Islands')], max_length=80),
        ),
        migrations.CreateModel(
            name='ArchivedPatient',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('patients.patient',),
        ),
        migrations.AlterField(
            model_name='patient',
            name='next_of_kin_suburb',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='Suburb/Town'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='clinician',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Clinician'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='date_of_birth',
            field=models.DateField(verbose_name='Date of birth'),
        ),
        migrations.AddField(
            model_name='patient',
            name='date_of_migration',
            field=models.DateField(blank=True, null=True, verbose_name='Date of migration'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='email',
            field=models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='ethnic_origin',
            field=models.CharField(blank=True, choices=[('New Zealand European', 'New Zealand European'), ('Australian', 'Australian'), ('Other Caucasian/European', 'Other Caucasian/European'), ('Aboriginal', 'Aboriginal'), ('Person from the Torres Strait Islands', 'Person from the Torres Strait Islands'), ('Maori', 'Maori'), ('NZ European / Maori', 'NZ European / Maori'), ('Samoan', 'Samoan'), ('Cook Islands Maori', 'Cook Islands Maori'), ('Tongan', 'Tongan'), ('Niuean', 'Niuean'), ('Tokelauan', 'Tokelauan'), ('Fijian', 'Fijian'), ('Other Pacific Peoples', 'Other Pacific Peoples'), ('Southeast Asian', 'Southeast Asian'), ('Chinese', 'Chinese'), ('Indian', 'Indian'), ('Other Asian', 'Other Asian'), ('Middle Eastern', 'Middle Eastern'), ('Latin American', 'Latin American'), ('Black African/African American', 'Black African/African American'), ('Other Ethnicity', 'Other Ethnicity'), ('Decline to Answer', 'Decline to Answer')], max_length=100, null=True, verbose_name='Ethnic origin'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='family_name',
            field=models.CharField(db_index=True, max_length=100, verbose_name='Family Name'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='given_names',
            field=models.CharField(db_index=True, max_length=100, verbose_name='Given Names'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='home_phone',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='Home phone'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='living_status',
            field=models.CharField(choices=[('Alive', 'Living'), ('Deceased', 'Deceased')], default='Alive', max_length=80, verbose_name='Living status'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='mobile_phone',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='Mobile phone'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='next_of_kin_email',
            field=models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='next_of_kin_family_name',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='Family name'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='next_of_kin_given_names',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='Given names'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='next_of_kin_home_phone',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='Home phone'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='next_of_kin_mobile_phone',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='Mobile phone'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='next_of_kin_work_phone',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='Work phone'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='rdrf_registry',
            field=models.ManyToManyField(related_name='patients', to='rdrf.Registry', verbose_name='Rdrf Registry'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='sex',
            field=models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1, verbose_name='Sex'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='work_phone',
            field=models.CharField(blank=True, max_length=30, null=True, verbose_name='Work phone'),
        ),
        migrations.AlterField(
            model_name='patientaddress',
            name='address_type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='patients.AddressType', verbose_name='Address type'),
        ),
        migrations.AlterField(
            model_name='patientaddress',
            name='country',
            field=models.CharField(max_length=100, verbose_name='Country'),
        ),
        migrations.AlterField(
            model_name='patientaddress',
            name='postcode',
            field=models.CharField(max_length=50, verbose_name='Postcode'),
        ),
        migrations.AlterField(
            model_name='patientaddress',
            name='state',
            field=models.CharField(max_length=50, verbose_name='State'),
        ),
        migrations.AddField(
            model_name='patient',
            name='patient_type',
            field=models.CharField(blank=True, max_length=80, null=True, verbose_name='Patient Type'),
        ),
        migrations.AlterModelOptions(
            name='patient',
            options={'ordering': ['family_name', 'given_names', 'date_of_birth'], 'permissions': (('can_see_full_name', 'Can see Full Name column'), ('can_see_dob', 'Can see Date of Birth column'), ('can_see_working_groups', 'Can see Working Groups column'), ('can_see_diagnosis_progress', 'Can see Diagnosis Progress column'), ('can_see_diagnosis_currency', 'Can see Diagnosis Currency column'), ('can_see_genetic_data_map', 'Can see Genetic Module column'), ('can_see_data_modules', 'Can see Data Modules column'), ('can_see_code_field', 'Can see Code Field column')), 'verbose_name_plural': 'Patient List'},
        ),
        migrations.AddField(
            model_name='clinicianother',
            name='use_other',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='clinicianother',
            name='clinician_address',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='clinicianother',
            name='clinician_hospital',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='clinicianother',
            name='clinician_name',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='patient',
            name='date_of_death',
            field=models.DateField(blank=True, null=True, verbose_name='Date of death'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='clinician',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Clinician'),
        ),
        migrations.CreateModel(
            name='Speciality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
            ],
        ),
        migrations.AddField(
            model_name='clinicianother',
            name='speciality',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.Speciality'),
        ),
        migrations.AddField(
            model_name='clinicianother',
            name='clinician_first_name',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='clinicianother',
            name='clinician_last_name',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='clinicianother',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='patientrelative',
            name='location',
            field=models.CharField(choices=[('AU - WA', 'Australia - WA'), ('AU - SA', 'Australia - SA'), ('AU - NSW', 'Australia - NSW'), ('AU - QLD', 'Australia - QLD'), ('AU - NT', 'Australia - NT'), ('AU - VIC', 'Australia - VIC'), ('AU - TAS', 'Australia - TAS'), ('NZ', 'New Zealand'), ('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('CV', 'Cabo Verde'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czechia'), ('CI', "Côte d'Ivoire"), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine, State of'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'), ('AX', 'Åland Islands')], max_length=80),
        ),
        migrations.AlterField(
            model_name='patientrelative',
            name='relative_patient',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='as_a_relative', to='patients.Patient', verbose_name='Create Patient?'),
        ),
        migrations.CreateModel(
            name='HistoricalAddressType',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.CharField(db_index=True, max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical address type',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalClinicianOther',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('use_other', models.BooleanField(default=False)),
                ('clinician_name', models.CharField(blank=True, max_length=200, null=True)),
                ('clinician_hospital', models.CharField(blank=True, max_length=200, null=True)),
                ('clinician_address', models.CharField(blank=True, max_length=200, null=True)),
                ('clinician_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('clinician_phone_number', models.CharField(blank=True, max_length=254, null=True)),
                ('clinician_first_name', models.CharField(blank=True, max_length=200, null=True)),
                ('clinician_last_name', models.CharField(blank=True, max_length=200, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
                ('speciality', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Speciality')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical clinician other',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalConsentValue',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('answer', models.BooleanField(default=False)),
                ('first_save', models.DateField(blank=True, null=True)),
                ('last_update', models.DateField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('consent_question', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rdrf.ConsentQuestion')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
            ],
            options={
                'verbose_name': 'historical consent value',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDoctor',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=4, null=True)),
                ('family_name', models.CharField(db_index=True, max_length=100, verbose_name='Family/Last name')),
                ('given_names', models.CharField(db_index=True, max_length=100, verbose_name='Given/First names')),
                ('sex', models.CharField(blank=True, choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1, null=True)),
                ('surgery_name', models.CharField(blank=True, max_length=100)),
                ('speciality', models.CharField(max_length=100)),
                ('address', models.TextField()),
                ('suburb', models.CharField(max_length=50, verbose_name='Suburb/Town/City')),
                ('postcode', models.CharField(blank=True, max_length=20, null=True)),
                ('phone', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('fax', models.CharField(blank=True, max_length=30, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('state', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.State', verbose_name='State/Province/Territory')),
            ],
            options={
                'verbose_name': 'historical doctor',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNextOfKinRelationship',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('relationship', models.CharField(max_length=100, verbose_name='Relationship')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Next of Kin Relationship',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalParentGuardian',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=50)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Place of birth')),
                ('date_of_migration', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1)),
                ('address', models.TextField()),
                ('suburb', models.CharField(max_length=50, verbose_name='Suburb/Town')),
                ('state', models.CharField(max_length=20, verbose_name='State/Province/Territory')),
                ('postcode', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('self_patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical parent guardian',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatientAddress',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('address', models.TextField()),
                ('suburb', models.CharField(max_length=100, verbose_name='Suburb/Town')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('state', models.CharField(max_length=50, verbose_name='State')),
                ('postcode', models.CharField(max_length=50, verbose_name='Postcode')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('address_type', models.ForeignKey(blank=True, db_constraint=False, default=1, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.AddressType', verbose_name='Address type')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
            ],
            options={
                'verbose_name': 'historical patient address',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatientConsent',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('form', models.TextField(blank=True, max_length=100, null=True, verbose_name='Consent form')),
                ('filename', models.CharField(max_length=255)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
            ],
            options={
                'verbose_name': 'historical patient consent',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatientDoctor',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('relationship', models.CharField(max_length=50)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('doctor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Doctor')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
            ],
            options={
                'verbose_name': 'historical medical professionals for patient',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatientRelative',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('family_name', models.CharField(max_length=100)),
                ('given_names', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('sex', models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1)),
                ('relationship', models.CharField(choices=[('Parent (1st degree)', 'Parent (1st degree)'), ('Child (1st degree)', 'Child (1st degree)'), ('Sibling (1st degree)', 'Sibling (1st degree)'), ('Identical Twin (0th degree)', 'Identical Twin (0th degree)'), ('Non-identical Twin (1st degree)', 'Non-identical Twin (1st degree)'), ('Half Sibling (1st degree)', 'Half Sibling (1st degree)'), ('Grandparent (2nd degree)', 'Grandparent (2nd degree)'), ('Grandchild (2nd degree)', 'Grandchild (2nd degree)'), ('Uncle/Aunt (2nd degree)', 'Uncle/Aunt (2nd degree)'), ('Niece/Nephew (2nd degree)', 'Niece/Nephew (2nd degree)'), ('1st Cousin (3rd degree)', '1st Cousin (3rd degree)'), ('Great Grandparent (3rd degree)', 'Great Grandparent (3rd degree)'), ('Great Grandchild (3rd degree)', 'Great Grandchild (3rd degree)'), ('Great Uncle/Aunt (3rd degree)', 'Great Uncle/Aunt (3rd degree)'), ('Grand Niece/Nephew (3rd degree)', 'Grand Niece/Nephew (3rd degree)'), ('1st Cousin once removed (4th degree)', '1st Cousin once removed (4th degree)'), ('Spouse', 'Spouse'), ('Unknown', 'Unknown'), ('Other', 'Other')], max_length=80)),
                ('location', models.CharField(choices=[('AU - WA', 'Australia - WA'), ('AU - SA', 'Australia - SA'), ('AU - NSW', 'Australia - NSW'), ('AU - QLD', 'Australia - QLD'), ('AU - NT', 'Australia - NT'), ('AU - VIC', 'Australia - VIC'), ('AU - TAS', 'Australia - TAS'), ('NZ', 'New Zealand'), ('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('CV', 'Cabo Verde'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czechia'), ('CI', "Côte d'Ivoire"), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine, State of'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'), ('AX', 'Åland Islands')], max_length=80)),
                ('living_status', models.CharField(choices=[('Alive', 'Living'), ('Deceased', 'Deceased')], max_length=80)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
                ('relative_patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient', verbose_name='Create Patient?')),
            ],
            options={
                'verbose_name': 'historical patient relative',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSpeciality',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('registry', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rdrf.Registry')),
            ],
            options={
                'verbose_name': 'historical speciality',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalState',
            fields=[
                ('short_name', models.CharField(db_index=True, max_length=3)),
                ('name', models.CharField(max_length=30)),
                ('country_code', models.CharField(blank=True, max_length=30, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical state',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='PatientStage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('allowed_next_stages', models.ManyToManyField(blank=True, related_name='_patientstage_allowed_next_stages_+', to='patients.PatientStage')),
                ('allowed_prev_stages', models.ManyToManyField(blank=True, related_name='_patientstage_allowed_prev_stages_+', to='patients.PatientStage')),
            ],
            options={
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalPatient',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('consent', models.BooleanField(help_text='The patient consents to be part of the registry and have data retained and shared in accordance with the information provided to them.', verbose_name='consent given')),
                ('consent_clinical_trials', models.BooleanField(default=False, help_text='Consent given to be contacted about clinical trials or other studies related to their condition.')),
                ('consent_sent_information', models.BooleanField(default=False, help_text='Consent given to be sent information on their condition', verbose_name='consent to be sent information given')),
                ('consent_provided_by_parent_guardian', models.BooleanField(default=False, help_text='Parent/Guardian consent provided on behalf of the patient.')),
                ('family_name', models.CharField(db_index=True, max_length=100, verbose_name='Family Name')),
                ('given_names', models.CharField(db_index=True, max_length=100, verbose_name='Given Names')),
                ('maiden_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Maiden name (if applicable)')),
                ('umrn', models.CharField(blank=True, db_index=True, max_length=50, null=True, verbose_name='Hospital/Clinic ID')),
                ('date_of_birth', models.DateField(verbose_name='Date of birth')),
                ('date_of_death', models.DateField(blank=True, null=True, verbose_name='Date of death')),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Place of birth')),
                ('date_of_migration', models.DateField(blank=True, null=True, verbose_name='Date of migration')),
                ('country_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country of birth')),
                ('ethnic_origin', models.CharField(blank=True, choices=[('New Zealand European', 'New Zealand European'), ('Australian', 'Australian'), ('Other Caucasian/European', 'Other Caucasian/European'), ('Aboriginal', 'Aboriginal'), ('Person from the Torres Strait Islands', 'Person from the Torres Strait Islands'), ('Maori', 'Maori'), ('NZ European / Maori', 'NZ European / Maori'), ('Samoan', 'Samoan'), ('Cook Islands Maori', 'Cook Islands Maori'), ('Tongan', 'Tongan'), ('Niuean', 'Niuean'), ('Tokelauan', 'Tokelauan'), ('Fijian', 'Fijian'), ('Other Pacific Peoples', 'Other Pacific Peoples'), ('Southeast Asian', 'Southeast Asian'), ('Chinese', 'Chinese'), ('Indian', 'Indian'), ('Other Asian', 'Other Asian'), ('Middle Eastern', 'Middle Eastern'), ('Latin American', 'Latin American'), ('Black African/African American', 'Black African/African American'), ('Other Ethnicity', 'Other Ethnicity'), ('Decline to Answer', 'Decline to Answer')], max_length=100, null=True, verbose_name='Ethnic origin')),
                ('sex', models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1, verbose_name='Sex')),
                ('home_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Home phone')),
                ('mobile_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Mobile phone')),
                ('work_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Work phone')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('next_of_kin_family_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Family name')),
                ('next_of_kin_given_names', models.CharField(blank=True, max_length=100, null=True, verbose_name='Given names')),
                ('next_of_kin_address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('next_of_kin_suburb', models.CharField(blank=True, max_length=50, null=True, verbose_name='Suburb/Town')),
                ('next_of_kin_state', models.CharField(blank=True, max_length=20, null=True, verbose_name='State/Province/Territory')),
                ('next_of_kin_postcode', models.IntegerField(blank=True, null=True, verbose_name='Postcode')),
                ('next_of_kin_home_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Home phone')),
                ('next_of_kin_mobile_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Mobile phone')),
                ('next_of_kin_work_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Work phone')),
                ('next_of_kin_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('next_of_kin_parent_place_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Place of birth of parents')),
                ('next_of_kin_country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('active', models.BooleanField(default=True, help_text='Ticked if active in the registry, ie not a deleted record, or deceased patient.')),
                ('inactive_reason', models.TextField(blank=True, help_text='Please provide reason for deactivating the patient', null=True, verbose_name='Reason')),
                ('living_status', models.CharField(choices=[('Alive', 'Living'), ('Deceased', 'Deceased')], default='Alive', max_length=80, verbose_name='Living status')),
                ('patient_type', models.CharField(blank=True, max_length=80, null=True, verbose_name='Patient Type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('clinician', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Clinician')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('next_of_kin_relationship', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.NextOfKinRelationship', verbose_name='Relationship')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('stage', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.PatientStage')),
            ],
            options={
                'verbose_name': 'historical patient',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='patient',
            name='stage',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.PatientStage'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='rdrf_registry',
            field=models.ManyToManyField(related_name='patients', to='rdrf.Registry', verbose_name='Registry'),
        ),
        migrations.AlterField(
            model_name='patient',
            name='working_groups',
            field=models.ManyToManyField(related_name='my_patients', to='groups.WorkingGroup', verbose_name='Working Group'),
        ),
        migrations.AlterField(
            model_name='patientconsent',
            name='form',
            field=registry.patients.models.ConsentFileField(blank=True, null=True, upload_to=registry.patients.models.upload_patient_consent_to, verbose_name='Consent form'),
        ),
        migrations.CreateModel(
            name='PatientSignature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signature', models.TextField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patients.Patient')),
            ],
        ),
        migrations.RunPython(
            code=encode_signatures,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name='PatientStageRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.CharField(choices=[('registered', 'Patient registered'), ('consented', 'Patient provided consent')], max_length=32, null=True)),
                ('order', models.PositiveIntegerField()),
                ('from_stage', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='patients.PatientStage')),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='rdrf.Registry')),
                ('to_stage', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='patients.PatientStage')),
            ],
            options={
                'unique_together': {('registry', 'from_stage', 'condition', 'to_stage')},
            },
        ),
        migrations.RunPython(
            code=set_rules,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='patientstagerule',
            name='from_stage',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='patients.PatientStage'),
        ),
        migrations.AlterField(
            model_name='patientstagerule',
            name='to_stage',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='patients.PatientStage'),
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='created_at',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='last_updated_at',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='last_updated_overall_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='patient',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='patient',
            name='last_updated_at',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='patient',
            name='last_updated_overall_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name='PatientGUID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guid', models.CharField(max_length=16, unique=True)),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='patients.Patient')),
            ],
        ),
        migrations.RunPython(
            code=set_patients_guid,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='historicalpatient',
            name='created_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='patient',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_patient_object', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='patientstage',
            name='registry',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='rdrf.Registry'),
        ),
        migrations.RunPython(
            code=set_registry_for_patient_stages,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='patientstage',
            name='registry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='rdrf.Registry'),
        ),
        migrations.AlterField(
            model_name='historicalpatientrelative',
            name='location',
            field=models.CharField(choices=[('AU - WA', 'Australia - WA'), ('AU - SA', 'Australia - SA'), ('AU - NSW', 'Australia - NSW'), ('AU - QLD', 'Australia - QLD'), ('AU - NT', 'Australia - NT'), ('AU - VIC', 'Australia - VIC'), ('AU - TAS', 'Australia - TAS'), ('NZ', 'New Zealand'), ('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('CV', 'Cabo Verde'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czechia'), ('CI', "Côte d'Ivoire"), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('SZ', 'Eswatini'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MK', 'North Macedonia'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine, State of'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'), ('AX', 'Åland Islands')], max_length=80),
        ),
        migrations.AlterField(
            model_name='patientrelative',
            name='location',
            field=models.CharField(choices=[('AU - WA', 'Australia - WA'), ('AU - SA', 'Australia - SA'), ('AU - NSW', 'Australia - NSW'), ('AU - QLD', 'Australia - QLD'), ('AU - NT', 'Australia - NT'), ('AU - VIC', 'Australia - VIC'), ('AU - TAS', 'Australia - TAS'), ('NZ', 'New Zealand'), ('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('CV', 'Cabo Verde'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czechia'), ('CI', "Côte d'Ivoire"), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('SZ', 'Eswatini'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MK', 'North Macedonia'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine, State of'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'), ('AX', 'Åland Islands')], max_length=80),
        ),
    ]
