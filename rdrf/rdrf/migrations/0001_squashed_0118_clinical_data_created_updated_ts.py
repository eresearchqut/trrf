# Generated by Django 2.2.9 on 2020-01-07 15:10
# -*- coding: utf-8 -*-
from __future__ import unicode_literals


from collections import defaultdict
import json

from django.conf import settings
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import positions.fields
import rdrf.forms.fields.jsonb
import rdrf.helpers.migration_utils
import rdrf.helpers.utils
import rdrf.models.definition.models

from django.db.utils import ProgrammingError
from rdrf.helpers.migration_utils import ClinicalDBRunPython
from rdrf.models.data_fixes import CdeMappings
from rdrf.forms.widgets.widgets import get_all_widgets




def forwards_func(apps, schema_editor):
    pass


def backwards_func(apps, schema_editor):
    pass


def copy_collections(apps, schema_editor):
    Modjgo = apps.get_model("rdrf", "Modjgo")
    print("got Modjgo okay")
    Registry = apps.get_model("rdrf", "Registry")
    if mongo_django:
        mongo_django(Modjgo, Registry.objects.all())

# note: migration is not fully reversable. it just removes the flag
# which says the mongo document was migrated.


mongo_django = undjango_mongo = None

def uncopy_collections(apps, schema_editor):
    Modjgo = apps.get_model("rdrf", "Modjgo")
    Registry = apps.get_model("rdrf", "Registry")
    if undjango_mongo:
        undjango_mongo(Modjgo, Registry.objects.all())


def make_positive(apps, schema_editor):
    RegistryForm = apps.get_model("rdrf", "RegistryForm")
    RegistryForm.objects.filter(position__lt=0).update(position=0)


def do_nothing(apps, schema_editor):
    pass

def set_codes(apps, schema_editor):
    CDEFile = apps.get_model("rdrf", "CDEFile")

    for f in CDEFile.objects.all():
        if f.registry:
            f.registry_code = f.registry.code
        else:
            print("CDEFile %s has null registry" % f.pk)
        if f.form:
            f.form_name = f.form.name
        else:
            print("CDEFile %s has null form" % f.pk)
        if f.section:
            f.section_code = f.section.code
        else:
            print("CDEFile %s has null section" % f.pk)
        if f.cde:
            f.cde_code = f.cde.code
        else:
            print("CDEFile %s has null cde" % f.pk)

        try:
            f.save()
        except Exception as ex:
            print("Could not set codes on CDEFile %s: %s" % (f.pk,
                                                             ex))


def set_fks(apps, schema_editor):
    from rdrf.models.definition.models import Registry, RegistryForm, Section, CommonDataElement

    def m(model): return apps.get_model("rdrf", model)
    CDEFile = m("CDEFile")
    for f in CDEFile.objects.all():
        try:
            f.registry = m("Registry").objects.get(code=f.registry_code)
        except Registry.DoesNotExist:
            msg = "Cannot set registry back on CDEFile %s registry_code = %s" % (
                f.pk, f.registry_code)
            print(msg)

        try:
            f.form = m("RegistryForm").objects.get(name=f.form_name,
                                                   registry=f.registry)
        except RegistryForm.DoesNotExist:
            msg = "Cannot set form back on CDEFile %s name = %s" % (f.pk,
                                                                    f.form_name)
            print(msg)

        try:
            f.section = m("Section").objects.get(code=f.section_code)
        except Section.DoesNotExist:
            msg = "Cannot set section back on CDEFile %s code = %s" % (f.pk,
                                                                       f.section_code)
            print(msg)

        try:
            f.cde = m("CommonDataElement").objects.get(code=f.cde_code)
        except CommonDataElement.DoesNotExist:
            msg = "Cannot set cde back on CDEFile %s code = %s" % (f.pk,
                                                                   f.cde_code)

            print(msg)

        try:
            f.save()
        except Exception as ex:
            print("could not revert CDEFile %s back: %s" % (f.pk,
                                                            ex))


def extract_model_field_data_from_clinical_data_json_field(apps, schema_editor):
    # Our database router ignores hints (below)
    # from the Django source code this looks like dbname
    print("Extracting ClinicalData field data ..")
    dbname = schema_editor.connection.alias
    print("This is database %s" % dbname)
    if dbname != "clinical":
        print("Not running on non-clinical database")
        return

    try:
        ClinicalData = apps.get_model("rdrf", "ClinicalData")
        num_records = ClinicalData.objects.all().count()
        print("Number of ClinicalData objects = %s" % num_records)
        print("Starting to iterate through ClinicalData objects")
        for clinical_data in ClinicalData.objects.all():
            clinical_data.django_model = clinical_data.data.get("django_model", "")
            clinical_data.django_id = clinical_data.data.get("django_id", 0)
            clinical_data.context_id = clinical_data.data.get("context_id", None)
            clinical_data.save()
            print("Saved clinical data %s OK" % clinical_data.pk)
        print("All done")
    except ProgrammingError:
        # thrown when run on wrong db
        print("not running clinical data update on main db")


def migrate_groups(apps, schema_editor):
    DemographicFields = apps.get_model('rdrf', 'demographicfields')
    Group = apps.get_model('auth', 'group')
    groups = defaultdict(list)
    for entry in DemographicFields.objects.all():
        groups[(entry.field, entry.readonly, entry.hidden, entry.registry_id, entry.is_section)].append(entry.group)
    DemographicFields.objects.all().delete()
    for key, value in groups.items():
        df = DemographicFields.objects.create(
            field=key[0],
            readonly=key[1],
            hidden=key[2],
            registry_id=key[3],
            is_section=key[4],
            group=value[0]
        )
        df.groups.add(*value)


HIDDEN = 2
READONLY = 1


def migrate_to_status(apps, schema_editor):
    DemographicFields = apps.get_model('rdrf', 'demographicfields')
    for entry in DemographicFields.objects.all():
        entry.status = HIDDEN if entry.hidden else READONLY
        entry.save()


def migrate_to_consent_configuration(apps, schema_editor):
    Registry = apps.get_model('rdrf', 'Registry')
    ConsentConfiguration = apps.get_model('rdrf', 'ConsentConfiguration')
    for reg in Registry.objects.all():
        meta_data = json.loads(reg.metadata_json) if reg.metadata_json else {}
        if 'features' in meta_data and 'consent_lock' in meta_data['features']:
            config, __ = ConsentConfiguration.objects.get_or_create(registry=reg)
            config.consent_locked = True
            config.save()
            meta_data['features'].remove('consent_lock')
            reg.metadata_json = json.dumps(meta_data)
            reg.save()


def fix_cde_data_type(cde_model):
    for k, v in CdeMappings.DATA_TYPE_MAPPING.items():
        cde_model.objects.filter(datatype__iexact=k.lower()).exclude(datatype=v).update(datatype=v)
    cde_model.objects.filter(widget_name__iexact='timewidget').update(datatype='time')


def fix_cde_widget_name(cde_model):
    for k, v in CdeMappings.WIDGET_NAME_MAPPING.items():
        cde_model.objects.filter(widget_name__iexact=k.lower()).exclude(widget_name=v).update(widget_name=v)

def fix_cde_widget_name_case(cde_model):
    for name in get_all_widgets():
        cde_model.objects.filter(widget_name__iexact=name.lower()).exclude(widget_name=name).update(widget_name=name)


def fix_data(apps, schema_editor):
    CommonDataElement = apps.get_model('rdrf','CommonDataElement')
    fix_cde_data_type(CommonDataElement)
    fix_cde_widget_name(CommonDataElement)
    fix_cde_widget_name_case(CommonDataElement)


class Migration(migrations.Migration):

    replaces = [('rdrf', '0001_initial'), ('rdrf', '0002_consentsection_information_text'), ('rdrf', '0003_emailnotification'), ('rdrf', '0004_emailnotification_email_from'), ('rdrf', '0005_auto_20151105_1417'), ('rdrf', '0006_auto_20151105_1422'), ('rdrf', '0007_auto_20151105_1603'), ('rdrf', '0008_emailtemplate_description'), ('rdrf', '0009_emailnotificationhistory'), ('rdrf', '0010_emailnotificationhistory_template_data'), ('rdrf', '0011_auto_20151109_1238'), ('rdrf', '0012_registryform_header'), ('rdrf', '0013_auto_20151201_1410'), ('rdrf', '0014_rdrfcontext'), ('rdrf', '0015_mongomigrationdummymodel'), ('rdrf', '0016_auto_20151217_1339'), ('rdrf', '0017_auto_20151217_1601'), ('rdrf', '0018_auto_20160223_1709'), ('rdrf', '0019_auto_20160531_1516'), ('rdrf', '0020_emailnotification_disabled'), ('rdrf', '0021_contextformgroup_contextformgroupitem'), ('rdrf', '0022_merge'), ('rdrf', '0023_rdrfcontext_context_form_group'), ('rdrf', '0024_auto_20160223_1344'), ('rdrf', '0025_contextformgroup_is_default'), ('rdrf', '0026_auto_20160314_1127'), ('rdrf', '0027_cdefile'), ('rdrf', '0028_merge'), ('rdrf', '0029_auto_20160604_2245'), ('rdrf', '0030_auto_20160614_1416'), ('rdrf', '0031_auto_20160720_1442'), ('rdrf', '0032_change_default_notification_from_email'), ('rdrf', '0033_auto_20160823_1343'), ('rdrf', '0034_filestorage'), ('rdrf', '0035_auto_20161018_1444'), ('rdrf', '0036_auto_20161026_1853'), ('rdrf', '0037_cdefile'), ('rdrf', '0038_remove_dummy'), ('rdrf', '0039_modjgo'), ('rdrf', '0040_mongo_django'), ('rdrf', '0037_registryform_position'), ('rdrf', '0041_merge_20161215_1142'), ('rdrf', '0042_add_context_ordering'), ('rdrf', '0043_auto_20170131_1517'), ('rdrf', '0044_cdefile_data_migration'), ('rdrf', '0045_remove_old_cdefile_fields'), ('rdrf', '0046_auto_20170413_1306'), ('rdrf', '0047_auto_20170421_1611'), ('rdrf', '0048_auto_20170523_1204'), ('rdrf', '0049_auto_20170601_1148'), ('rdrf', '0050_registryform_applicability_condition'), ('rdrf', '0051_auto_20170802_1630'), ('rdrf', '0052_auto_20170807_1109'), ('rdrf', '0053_auto_20170908_1117'), ('rdrf', '0054_auto_20170908_1609'), ('rdrf', '0055_auto_20170911_1034'), ('rdrf', '0056_auto_20170911_1039'), ('rdrf', '0057_new_notification_type'), ('rdrf', '0058_auto_20171109_1106'), ('rdrf', '0059_auto_20171116_1131'), ('rdrf', '0060_auto_20180118_1038'), ('rdrf', '0061_annotation'), ('rdrf', '0062_consentrule'), ('rdrf', '0063_consentrule_enabled'), ('rdrf', '0064_delete_annotation'), ('rdrf', '0065_annotation'), ('rdrf', '0066_auto_20180319_1411'), ('rdrf', '0067_annotation_orig_value'), ('rdrf', '0068_auto_20180504_1330'), ('rdrf', '0069_registryform_display_name'), ('rdrf', '0070_auto_20180521_1047'), ('rdrf', '0071_auto_20180521_1051'), ('rdrf', '0072_commondataelement_important'), ('rdrf', '0073_auto_20180830_1340'), ('rdrf', '0074_auto_20180831_1509'), ('rdrf', '0075_auto_20180831_1557'), ('rdrf', '0076_auto_20180906_0947'), ('rdrf', '0077_auto_20180920_1312'), ('rdrf', '0078_auto_20180920_1334'), ('rdrf', '0079_surveyrequest_survey_name'), ('rdrf', '0080_survey_display_name'), ('rdrf', '0081_clinicaldata_active'), ('rdrf', '0082_auto_20181106_1100'), ('rdrf', '0083_auto_20181114_1510'), ('rdrf', '0084_surveyrequest_communication_type'), ('rdrf', '0085_cliniciansignuprequest'), ('rdrf', '0086_cliniciansignuprequest_speciality'), ('rdrf', '0087_cliniciansignuprequest_clinician_other'), ('rdrf', '0088_auto_20181114_1318'), ('rdrf', '0089_auto_20181120_1604'), ('rdrf', '0090_remove_cliniciansignuprequest_speciality'), ('rdrf', '0091_survey_is_followup'), ('rdrf', '0092_auto_20181203_1705'), ('rdrf', '0093_auto_20181220_1457'), ('rdrf', '0094_surveyquestion_instruction'), ('rdrf', '0095_auto_20190206_1030'), ('rdrf', '0096_verbose_name_fix_email_notification_history'), ('rdrf', '0097_registryform_conditional_rendering_rules'), ('rdrf', '0098_demographic_fields_m2m_group'), ('rdrf', '0099_m2m_groups_data_migration'), ('rdrf', '0100_remove_demographicfields_group'), ('rdrf', '0101_demographic_fields_unique_field_and_registry'), ('rdrf', '0102_demographic_fields_status'), ('rdrf', '0103_demographic_fields_status_data_migration'), ('rdrf', '0104_demographic_fields_remove_hidden_and_readonly'), ('rdrf', '0105_demographic_fields_ordering'), ('rdrf', '0106_contextformgroup_sort_order'), ('rdrf', '0107_consentconfiguration'), ('rdrf', '0108_consent_configuration_data_migration'), ('rdrf', '0109_email_notification_description_update'), ('rdrf', '0110_consent_section_and_question_timestamps'), ('rdrf', '0111_commondataelement_widget_settings'), ('rdrf', '0112_cde_datatype_choices'), ('rdrf', '0113_cde_datatype_and_widget_name_fixup'), ('rdrf', '0114_registry_forms_add_default_ordering'), ('rdrf', '0115_form_title'), ('rdrf', '0116_rdrfcontext_active'), ('rdrf', '0117_rdrfcontext_updated_by'), ('rdrf', '0118_clinical_data_created_updated_ts')]

    initial = True

    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0008_alter_user_username_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdjudicationDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, max_length=80, null=True)),
                ('fields', models.TextField()),
                ('result_fields', models.TextField()),
                ('decision_field', models.TextField(blank=True, null=True)),
                ('adjudicator_username', models.CharField(default='admin', max_length=80)),
                ('adjudicating_users', models.TextField(blank=True, help_text='Either comma-seperated list of usernames and/or working group names', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdjudicationRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=80)),
                ('requesting_username', models.CharField(max_length=80)),
                ('patient', models.IntegerField()),
                ('state', models.CharField(default='C', max_length=1)),
                ('definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.AdjudicationDefinition')),
            ],
        ),
        migrations.CreateModel(
            name='AdjudicationResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_data', models.TextField()),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.AdjudicationRequest')),
            ],
        ),
        migrations.CreateModel(
            name='CDEPermittedValueGroup',
            fields=[
                ('code', models.CharField(max_length=250, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='CommonDataElement',
            fields=[
                ('code', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Label for field in form', max_length=250)),
                ('desc', models.TextField(blank=True, help_text='origin of field')),
                ('datatype', models.CharField(help_text='type of field', max_length=50)),
                ('instructions', models.TextField(blank=True, help_text='Used to indicate help text for field')),
                ('allow_multiple', models.BooleanField(default=False, help_text='If a range, indicate whether multiple selections allowed')),
                ('max_length', models.IntegerField(blank=True, help_text='Length of field - only used for character fields', null=True)),
                ('max_value', models.IntegerField(blank=True, help_text='Only used for numeric fields', null=True)),
                ('min_value', models.IntegerField(blank=True, help_text='Only used for numeric fields', null=True)),
                ('is_required', models.BooleanField(default=False, help_text='Indicate whether field is non-optional')),
                ('pattern', models.CharField(blank=True, help_text='Regular expression to validate string fields (optional)', max_length=50)),
                ('widget_name', models.CharField(blank=True, help_text='If a special widget required indicate here - leave blank otherwise', max_length=80)),
                ('calculation', models.TextField(blank=True, help_text='Calculation in javascript. Use context.CDECODE to refer to other CDEs. Must use context.result to set output')),
                ('questionnaire_text', models.TextField(blank=True, help_text='The text to use in any public facing questionnaires/registration forms')),
                ('pv_group', models.ForeignKey(blank=True, help_text='If a range, indicate the Permissible Value Group', null=True, on_delete=django.db.models.deletion.SET_NULL, to='rdrf.CDEPermittedValueGroup')),
            ],
            options={
                'verbose_name': 'Data Element',
                'verbose_name_plural': 'Data Elements',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_username', models.CharField(max_length=80)),
                ('to_username', models.CharField(max_length=80)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('message', models.TextField()),
                ('link', models.CharField(default='', max_length=100)),
                ('seen', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100)),
                ('display_name', models.CharField(max_length=200)),
                ('questionnaire_display_name', models.CharField(blank=True, max_length=200)),
                ('elements', models.TextField()),
                ('allow_multiple', models.BooleanField(default=False, help_text='Allow extra items to be added')),
                ('extra', models.IntegerField(blank=True, help_text='Extra rows to show if allow_multiple checked', null=True)),
                ('questionnaire_help', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Wizard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registry', models.CharField(max_length=50)),
                ('forms', models.TextField(help_text='A comma-separated list of forms')),
                ('rules', models.TextField(help_text='Rules')),
            ],
        ),
        migrations.CreateModel(
            name='Registry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('code', models.CharField(max_length=10)),
                ('desc', models.TextField()),
                ('splash_screen', models.TextField()),
                ('patient_splash_screen', models.TextField(blank=True, null=True)),
                ('version', models.CharField(blank=True, max_length=20)),
                ('metadata_json', models.TextField(blank=True)),
                ('patient_data_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rdrf.Section')),
            ],
            options={
                'verbose_name_plural': 'registries',
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_submitted', models.DateTimeField(auto_now_add=True)),
                ('processed', models.BooleanField(default=False)),
                ('patient_id', models.IntegerField(blank=True, help_text='The id of the patient created from this response, if any', null=True)),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
            ],
        ),
        migrations.CreateModel(
            name='DemographicFields',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=50)),
                ('readonly', models.NullBooleanField()),
                ('hidden', models.NullBooleanField()),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
            ],
            options={
                'verbose_name_plural': 'Demographic Fields',
            },
        ),
        migrations.CreateModel(
            name='ConsentSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('section_label', models.CharField(max_length=100)),
                ('information_link', models.CharField(blank=True, max_length=100, null=True)),
                ('applicability_condition', models.TextField(blank=True)),
                ('validation_rule', models.TextField(blank=True)),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consent_sections', to='rdrf.Registry')),
                ('information_text', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConsentQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('question_label', models.TextField()),
                ('instructions', models.TextField(blank=True)),
                ('questionnaire_label', models.TextField(blank=True)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='rdrf.ConsentSection')),
            ],
        ),
        migrations.CreateModel(
            name='CdePolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.TextField(blank=True)),
                ('cde', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.CommonDataElement')),
                ('groups_allowed', models.ManyToManyField(blank=True, to='auth.Group')),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
            ],
            options={
                'verbose_name': 'CDE Policy',
                'verbose_name_plural': 'CDE Policies',
            },
        ),
        migrations.CreateModel(
            name='CDEPermittedValue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=30)),
                ('value', models.CharField(max_length=256)),
                ('questionnaire_value', models.CharField(blank=True, max_length=256, null=True)),
                ('desc', models.TextField(null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('pv_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permitted_value_set', to='rdrf.CDEPermittedValueGroup')),
            ],
        ),
        migrations.AddField(
            model_name='adjudicationdefinition',
            name='registry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry'),
        ),
        migrations.CreateModel(
            name='AdjudicationDecision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient', models.IntegerField()),
                ('decision_data', models.TextField()),
                ('definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.AdjudicationDefinition')),
            ],
        ),
        migrations.CreateModel(
            name='Adjudication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requesting_username', models.CharField(max_length=80)),
                ('patient_id', models.IntegerField()),
                ('decision', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='rdrf.AdjudicationDecision')),
                ('definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.AdjudicationDefinition')),
            ],
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(choices=[('ar', 'Arabic'), ('de', 'German'), ('en', 'English'), ('no', 'Norwegian')], max_length=2)),
                ('subject', models.CharField(max_length=50)),
                ('body', models.TextField()),
                ('description', models.TextField(default='Template description')),
            ],
        ),
        migrations.CreateModel(
            name='EmailNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(choices=[('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered')], max_length=100)),
                ('recipient', models.CharField(blank=True, max_length=100, null=True)),
                ('group_recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.Group')),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
                ('email_from', models.EmailField(default='no-reply@DOMAIN.COM', max_length=254)),
                ('email_templates', models.ManyToManyField(to='rdrf.EmailTemplate')),
            ],
        ),
        migrations.CreateModel(
            name='EmailNotificationHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_stamp', models.DateTimeField(auto_now_add=True)),
                ('language', models.CharField(max_length=10)),
                ('email_notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.EmailNotification')),
                ('template_data', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RegistryForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('questionnaire_display_name', models.CharField(blank=True, max_length=80)),
                ('sections', models.TextField(help_text='Comma-separated list of sections')),
                ('is_questionnaire', models.BooleanField(default=False, help_text="Check if this form is questionnaire form for it's registry")),
                ('is_questionnaire_login', models.BooleanField(default=False, help_text='If the form is a questionnaire, is it accessible only by logged in users?', verbose_name='Questionnaire Login Required')),
                ('position', positions.fields.PositionField(default=-1)),
                ('questionnaire_questions', models.TextField(blank=True, help_text='Comma-separated list of sectioncode.cdecodes for questionnnaire')),
                ('complete_form_cdes', models.ManyToManyField(blank=True, to='rdrf.CommonDataElement')),
                ('groups_allowed', models.ManyToManyField(blank=True, to='auth.Group')),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
                ('header', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='RDRFContext',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('display_name', models.CharField(blank=True, max_length=80, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
            ],
        ),
        migrations.CreateModel(
            name='MongoMigrationDummyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(choices=[('initial', 'initial'), ('testing', 'testing')], max_length=80)),
            ],
        ),
        migrations.RunPython(
            code=forwards_func,
            reverse_code=backwards_func,
        ),
        migrations.AlterField(
            model_name='mongomigrationdummymodel',
            name='version',
            field=models.CharField(choices=[('initial', 'initial'), ('testing', 'testing'), ('1.0.17', 'populate context_id on all patient records')], max_length=80),
        ),
        migrations.AlterField(
            model_name='commondataelement',
            name='max_value',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Only used for numeric fields', max_digits=10, null=True),
        ),
        migrations.AlterField(
            model_name='commondataelement',
            name='min_value',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Only used for numeric fields', max_digits=10, null=True),
        ),
        migrations.AddField(
            model_name='emailnotification',
            name='disabled',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='ContextFormGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context_type', models.CharField(choices=[('F', 'Fixed'), ('M', 'Multiple')], default='F', max_length=1)),
                ('name', models.CharField(max_length=80)),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='context_form_groups', to='rdrf.Registry')),
                ('naming_scheme', models.CharField(choices=[('D', 'Automatic - Date'), ('N', 'Automatic - Number'), ('M', 'Manual - Free Text'), ('C', 'CDE - Nominate CDE to use')], default='D', max_length=1)),
                ('is_default', models.BooleanField(default=False)),
                ('naming_cde_to_use', models.CharField(blank=True, max_length=80, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='rdrfcontext',
            name='context_form_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rdrf.ContextFormGroup'),
        ),
        migrations.CreateModel(
            name='ContextFormGroupItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context_form_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='rdrf.ContextFormGroup')),
                ('registry_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.RegistryForm')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='cdepermittedvalue',
            unique_together={('pv_group', 'code')},
        ),
        migrations.AlterField(
            model_name='registry',
            name='code',
            field=models.CharField(max_length=10, unique=True),
        ),
        migrations.AlterField(
            model_name='section',
            name='code',
            field=models.CharField(max_length=100, unique=True),
        ),
        migrations.AlterUniqueTogether(
            name='consentquestion',
            unique_together={('section', 'code')},
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='email_from',
            field=models.EmailField(default='No Reply <no-reply@mg.ccgapps.com.au>', max_length=254),
        ),
        migrations.AlterField(
            model_name='emailtemplate',
            name='language',
            field=models.CharField(choices=[('ar', 'Arabic'), ('de', 'German'), ('en', 'English')], max_length=2),
        ),
        migrations.CreateModel(
            name='FileStorage',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('data', models.BinaryField()),
                ('size', models.IntegerField(default=0)),
            ],
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='description',
            field=models.CharField(choices=[('account-locked', 'Account Locked'), ('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered')], max_length=100),
        ),
        migrations.AlterField(
            model_name='registryform',
            name='position',
            field=models.IntegerField(default=-1),
        ),
        migrations.CreateModel(
            name='CDEFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.FileField(max_length=300, upload_to=rdrf.models.definition.models.file_upload_to)),
                ('filename', models.CharField(max_length=255)),
                ('cde', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.CommonDataElement')),
                ('form', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rdrf.RegistryForm')),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rdrf.Section')),
                ('cde_code', models.CharField(blank=True, max_length=30)),
                ('form_name', models.CharField(blank=True, max_length=80)),
                ('registry_code', models.CharField(default='', max_length=10)),
                ('section_code', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.DeleteModel(
            name='MongoMigrationDummyModel',
        ),
        migrations.CreateModel(
            name='Modjgo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registry_code', models.CharField(db_index=True, max_length=10)),
                ('collection', models.CharField(choices=[('cdes', 'cdes'), ('history', 'history'), ('progress', 'progress'), ('registry_specific_patient_data', 'registry_specific_patient_data')], db_index=True, max_length=50)),
                ('data', rdrf.forms.fields.jsonb.DataField(default=dict)),
            ],
        ),
        rdrf.helpers.migration_utils.ClinicalDBRunPython(
            code=copy_collections,
            reverse_code=uncopy_collections,
        ),
        migrations.RunPython(
            code=make_positive,
            reverse_code=do_nothing,
        ),
        migrations.AlterField(
            model_name='registryform',
            name='position',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='contextformgroup',
            name='ordering',
            field=models.CharField(choices=[('C', 'Creation Time'), ('N', 'Name')], default='C', max_length=1),
        ),
        migrations.RunPython(
            code=set_codes,
            reverse_code=set_fks,
        ),
        migrations.RemoveField(
            model_name='cdefile',
            name='cde',
        ),
        migrations.RemoveField(
            model_name='cdefile',
            name='form',
        ),
        migrations.RemoveField(
            model_name='cdefile',
            name='registry',
        ),
        migrations.RemoveField(
            model_name='cdefile',
            name='section',
        ),
        migrations.AlterField(
            model_name='emailtemplate',
            name='language',
            field=models.CharField(choices=[('en', 'English')], max_length=2),
        ),
        migrations.AlterField(
            model_name='emailtemplate',
            name='language',
            field=models.CharField(choices=[('en', 'English'), ('ar', 'Arabic'), ('de', 'German')], max_length=2),
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='description',
            field=models.CharField(choices=[('account-locked', 'Account Locked'), ('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered'), ('account-verified', 'Account Verified')], max_length=100),
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='description',
            field=models.CharField(choices=[('account-locked', 'Account Locked'), ('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered'), ('new-patient-parent', 'New Patient Registered (Parent)'), ('account-verified', 'Account Verified')], max_length=100),
        ),
        migrations.AddField(
            model_name='registryform',
            name='applicability_condition',
            field=models.TextField(blank=True, help_text='E.g. patient.deceased == True', null=True),
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='description',
            field=models.CharField(choices=[('account-locked', 'Account Locked'), ('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered'), ('new-patient-parent', 'New Patient Registered (Parent)'), ('account-verified', 'Account Verified'), ('reminder', 'Reminder')], max_length=100),
        ),
        migrations.AlterField(
            model_name='emailtemplate',
            name='language',
            field=models.CharField(choices=[('en', 'English'), ('ar', 'Arabic'), ('es', 'Spanish'), ('de', 'German')], max_length=2),
        ),
        migrations.RenameModel(
            old_name='Modjgo',
            new_name='ClinicalData',
        ),
        migrations.RemoveField(
            model_name='adjudicationdecision',
            name='definition',
        ),
        migrations.RemoveField(
            model_name='adjudicationdefinition',
            name='registry',
        ),
        migrations.RemoveField(
            model_name='adjudicationrequest',
            name='definition',
        ),
        migrations.RemoveField(
            model_name='adjudicationresponse',
            name='request',
        ),
        migrations.DeleteModel(
            name='Adjudication',
        ),
        migrations.DeleteModel(
            name='AdjudicationDecision',
        ),
        migrations.DeleteModel(
            name='AdjudicationDefinition',
        ),
        migrations.DeleteModel(
            name='AdjudicationRequest',
        ),
        migrations.DeleteModel(
            name='AdjudicationResponse',
        ),
        migrations.AddField(
            model_name='clinicaldata',
            name='django_id',
            field=models.IntegerField(db_index=True, default=0),
        ),
        migrations.AddField(
            model_name='clinicaldata',
            name='django_model',
            field=models.CharField(db_index=True, default='Patient', max_length=80),
        ),
        migrations.AddField(
            model_name='clinicaldata',
            name='context_id',
            field=models.IntegerField(blank=True, db_index=True, null=True),
        ),
        rdrf.helpers.migration_utils.ClinicalDBRunPython(
            code=extract_model_field_data_from_clinical_data_json_field,
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='description',
            field=models.CharField(choices=[('account-locked', 'Account Locked'), ('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered'), ('new-patient-parent', 'New Patient Registered (Parent)'), ('account-verified', 'Account Verified'), ('password-expiry-warning', 'Password Expiry Warning'), ('reminder', 'Reminder')], max_length=100),
        ),
        migrations.AlterField(
            model_name='emailtemplate',
            name='language',
            field=models.CharField(choices=[('en', 'English'), ('ar', 'Arabic'), ('po', 'Polish'), ('es', 'Spanish'), ('de', 'German')], max_length=2),
        ),
        migrations.AlterField(
            model_name='emailtemplate',
            name='language',
            field=models.CharField(choices=[('en', 'English'), ('ar', 'Arabic'), ('pl', 'Polish'), ('es', 'Spanish'), ('de', 'German')], max_length=2),
        ),
        migrations.AlterField(
            model_name='emailtemplate',
            name='language',
            field=models.CharField(choices=[('en', 'English'), ('ar', 'Arabic'), ('pl', 'Polish'), ('es', 'Spanish'), ('de', 'German'), ('fr', 'French'), ('it', 'Italian')], max_length=2),
        ),
        migrations.CreateModel(
            name='ConsentRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capability', models.CharField(choices=[('see_patient', 'See Patient')], max_length=50)),
                ('consent_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.ConsentQuestion')),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
                ('user_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('enabled', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotation_type', models.CharField(choices=[('verified', 'Verified'), ('corrected', 'Corrected')], db_index=True, max_length=80)),
                ('patient_id', models.IntegerField(db_index=True)),
                ('context_id', models.IntegerField(blank=True, db_index=True, null=True)),
                ('registry_code', models.CharField(max_length=10)),
                ('form_name', models.CharField(max_length=80)),
                ('section_code', models.CharField(max_length=100)),
                ('item', models.IntegerField(null=True)),
                ('cde_code', models.CharField(max_length=30)),
                ('cde_value', models.TextField()),
                ('username', models.CharField(max_length=254)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField()),
                ('orig_value', models.TextField(default='')),
            ],
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='description',
            field=models.CharField(choices=[('account-locked', 'Account Locked'), ('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered'), ('new-patient-parent', 'New Patient Registered (Parent)'), ('account-verified', 'Account Verified'), ('password-expiry-warning', 'Password Expiry Warning'), ('reminder', 'Reminder'), ('clinician-selected', 'Clinician Selected')], max_length=100),
        ),
        migrations.AddField(
            model_name='registryform',
            name='display_name',
            field=models.CharField(blank=True, help_text='Form Name displayed to users', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='registryform',
            name='name',
            field=models.CharField(help_text='Internal name: Alphanumeric', max_length=80),
        ),
        migrations.AlterField(
            model_name='registryform',
            name='name',
            field=models.CharField(help_text='Internal name used by system: Alphanumeric, no spaces', max_length=80),
        ),
        migrations.AddField(
            model_name='commondataelement',
            name='important',
            field=models.BooleanField(default=False, help_text='Indicate whether the field should be emphasised with a green asterisk'),
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
                ('display_name', models.CharField(blank=True, max_length=80, null=True)),
                ('is_followup', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Precondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=80)),
                ('cde', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.CommonDataElement')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Survey')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(blank=True, null=True)),
                ('cde', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.CommonDataElement')),
                ('precondition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rdrf.Precondition')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_questions', to='rdrf.Survey')),
                ('instruction', models.TextField(blank=True, null=True)),
                ('copyright_text', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SurveyAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey_name', models.CharField(max_length=80)),
                ('patient_token', models.CharField(max_length=80, unique=True)),
                ('state', models.CharField(choices=[('requested', 'Requested'), ('started', 'Started'), ('completed', 'Completed')], max_length=20)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
                ('response', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='clinicaldata',
            name='active',
            field=models.BooleanField(default=True, help_text='Indicate whether an entity is active or not'),
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='description',
            field=models.CharField(choices=[('account-locked', 'Account Locked'), ('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered'), ('new-patient-parent', 'New Patient Registered (Parent)'), ('account-verified', 'Account Verified'), ('password-expiry-warning', 'Password Expiry Warning'), ('reminder', 'Reminder'), ('clinician-signup-request', 'Clinician Signup Request'), ('clinician-selected', 'Clinician Selected')], max_length=100),
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='description',
            field=models.CharField(choices=[('account-locked', 'Account Locked'), ('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered'), ('new-patient-parent', 'New Patient Registered (Parent)'), ('account-verified', 'Account Verified'), ('password-expiry-warning', 'Password Expiry Warning'), ('reminder', 'Reminder'), ('clinician-signup-request', 'Clinician Signup Request'), ('clinician-activation', 'Clinician Activation'), ('clinician-selected', 'Clinician Selected')], max_length=100),
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='description',
            field=models.CharField(choices=[('account-locked', 'Account Locked'), ('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered'), ('new-patient-parent', 'New Patient Registered (Parent)'), ('account-verified', 'Account Verified'), ('password-expiry-warning', 'Password Expiry Warning'), ('reminder', 'Reminder'), ('clinician-signup-request', 'Clinician Signup Request'), ('clinician-activation', 'Clinician Activation'), ('clinician-selected', 'Clinician Selected'), ('participant-clinician-notification', 'Participant Clinician Notification')], max_length=100),
        ),
        migrations.CreateModel(
            name='ClinicianSignupRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_id', models.IntegerField()),
                ('clinician_email', models.CharField(max_length=80)),
                ('state', models.CharField(choices=[('emailed', 'Emailed'), ('signed-up', 'Signed Up'), ('created', 'Created'), ('error', 'Error'), ('rejected', 'Rejected')], default='created', max_length=80)),
                ('token', models.CharField(default=rdrf.helpers.utils.generate_token, max_length=80, unique=True)),
                ('emailed_date', models.DateTimeField(null=True)),
                ('signup_date', models.DateTimeField(null=True)),
                ('clinician', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
                ('clinician_other', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='patients.ClinicianOther')),
            ],
        ),
        migrations.AlterField(
            model_name='commondataelement',
            name='pv_group',
            field=models.ForeignKey(blank=True, help_text='If a range, indicate the Permissible Value Group', null=True, on_delete=django.db.models.deletion.CASCADE, to='rdrf.CDEPermittedValueGroup'),
        ),
        migrations.AlterField(
            model_name='registry',
            name='patient_data_section',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rdrf.Section'),
        ),
        migrations.AlterModelOptions(
            name='emailnotificationhistory',
            options={'verbose_name_plural': 'Email Notification History'},
        ),
        migrations.AddField(
            model_name='registryform',
            name='conditional_rendering_rules',
            field=models.TextField(blank=True, help_text='Use the conditional rendering DSL to add rules.\n                     Click <a href="/forms/dsl-help" target="_blank">here</a> for more info', null=True),
        ),
        migrations.AddField(
            model_name='demographicfields',
            name='is_section',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='demographicfields',
            name='groups',
            field=models.ManyToManyField(related_name='demographic_fields', to='auth.Group'),
        ),
        migrations.RunPython(
            code=migrate_groups,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name='demographicfields',
            name='group',
        ),
        migrations.AlterUniqueTogether(
            name='demographicfields',
            unique_together={('registry', 'field')},
        ),
        migrations.AddField(
            model_name='demographicfields',
            name='status',
            field=models.IntegerField(choices=[(1, 'Read only'), (2, 'Hidden')], default=2),
        ),
        migrations.RunPython(
            code=migrate_to_status,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name='demographicfields',
            name='hidden',
        ),
        migrations.RemoveField(
            model_name='demographicfields',
            name='readonly',
        ),
        migrations.AlterModelOptions(
            name='demographicfields',
            options={'ordering': ('registry', '-is_section', 'field', 'status'), 'verbose_name_plural': 'Demographic Fields'},
        ),
        migrations.AddField(
            model_name='contextformgroup',
            name='sort_order',
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.CreateModel(
            name='ConsentConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('esignature', models.CharField(choices=[('enabled', 'enabled'), ('disabled', 'disabled'), ('required', 'required')], default='disabled', max_length=16)),
                ('consent_locked', models.BooleanField(default=False)),
                ('registry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='consent_configuration', to='rdrf.Registry')),
            ],
        ),
        migrations.RunPython(
            code=migrate_to_consent_configuration,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='emailnotification',
            name='description',
            field=models.CharField(choices=[('account-locked', 'Account Locked'), ('other-clinician', 'Other Clinician'), ('new-patient', 'New Patient Registered'), ('new-patient-parent', 'New Patient Registered (Parent)'), ('account-verified', 'Account Verified'), ('password-expiry-warning', 'Password Expiry Warning'), ('reminder', 'Reminder'), ('clinician-signup-request', 'Clinician Signup Request'), ('clinician-activation', 'Clinician Activation'), ('clinician-selected', 'Clinician Selected'), ('participant-clinician-notification', 'Participant Clinician Notification'), ('patient-consent-change', 'Patient Consent Change')], max_length=100),
        ),
        migrations.AddField(
            model_name='consentquestion',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='consentquestion',
            name='last_updated_at',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='consentsection',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='consentsection',
            name='last_updated_at',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='commondataelement',
            name='widget_settings',
            field=models.TextField(blank=True, help_text='If the widget needs additional settings add them here'),
        ),
        migrations.AlterField(
            model_name='commondataelement',
            name='datatype',
            field=models.CharField(choices=[('boolean', 'Boolean'), ('calculated', 'Calculated'), ('date', 'Date'), ('file', 'File'), ('float', 'Float'), ('integer', 'Integer'), ('range', 'Range'), ('string', 'String'), ('time', 'Time')], default='string', help_text='type of field', max_length=50),
        ),
        migrations.RunPython(
            code=fix_data,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterModelOptions(
            name='registryform',
            options={'ordering': ('registry', 'position')},
        ),
        migrations.CreateModel(
            name='FormTitle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_title', models.CharField(choices=[('Demographics', 'Demographics'), ('Consents', 'Consents'), ('Clinician', 'Clinician'), ('Proms', 'Proms'), ('Family linkage', 'Family Linkage')], max_length=50)),
                ('custom_title', models.CharField(max_length=50)),
                ('order', models.PositiveIntegerField(help_text='When the user with multiple groups matches more than 1 customisation the title with the lower order number will be displayed.')),
                ('groups', models.ManyToManyField(help_text='Users of these groups will see the custom title instead of the default one', to='auth.Group')),
                ('registry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rdrf.Registry')),
            ],
            options={
                'ordering': ('registry', 'default_title', 'order'),
            },
        ),
        migrations.AddField(
            model_name='rdrfcontext',
            name='active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='rdrfcontext',
            name='last_updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='clinicaldata',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='clinicaldata',
            name='last_updated_at',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='clinicaldata',
            name='last_updated_by',
            field=models.IntegerField(blank=True, db_index=True, null=True),
        ),
    ]
