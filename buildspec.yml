version: 0.2
phases:
  install:
    commands:
      # CodePipeline has no support for git submodules:
      #
      # https://forums.aws.amazon.com/thread.jspa?threadID=248267
      #
      # Using a simplified version of solutions on
      #
      # https://stackoverflow.com/questions/42712542/how-to-auto-deploying-git-repositories-with-submodules-on-aws/
      #
      # to fetch submodules. It can be simplified, because our GitHub repositories are public, so we don't need to
      # set up SSH.
      - |
        if [ -f .gitmodules ]; then
          echo "Project has git submodules."
          echo "Manual workaround to help CodePipeline fetch git submodules."
          git init
          git remote add origin "$GITHUB_CLONE_URL"
          git fetch
          git checkout -f "$CODEBUILD_RESOLVED_SOURCE_VERSION"
          git submodule update --init --recursive
        fi
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      - echo Logging in to Docker Hub...
      - echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
      - touch .env_local
  build:
    commands:
      - echo Build started on `date`
      - docker-compose build
      - echo Running tests...
      - scripts/lint.sh
      - scripts/django-checks.sh
      - scripts/js_dependencies.py --verify
      - scripts/check-migrations.sh
      - scripts/unit-tests.sh
      - scripts/end2end-tests.sh
      - export GIT_TAG="$(echo $GIT_COMMIT_ID | cut -c1-8)"
      - export IMAGE_TAG=$GIT_TAG
      - echo "Building image from commit ${GIT_COMMIT_ID} ${GIT_COMMIT_URL}"
      - docker build -f docker/production/Dockerfile --label "release-id=${RELEASE_ID}" -t "${IMAGE_REPO}:${GIT_TAG}" -t "${IMAGE_REPO}:${GIT_BRANCH_NAME}" .

      # docker push used to be in post_build, but post_build is executed even on build failure.
      # We don't want to push the docker image if the build failed for any reason, so we can't do the docker push in post_build.
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push "${IMAGE_REPO}:${GIT_TAG}"
      - docker push "${IMAGE_REPO}:${GIT_BRANCH_NAME}"
  post_build:
    commands:
      - aws ssm put-parameter --overwrite --type String --name /app/$ENVIRONMENT_NAME/$APPLICATION_NAME/RELEASE_ID --value $IMAGE_TAG
      - envsubst < taskdef.json > out && mv out taskdef.json
      - envsubst < appspec.yaml > out && mv out appspec.yaml
artifacts:
  files:
    - 'taskdef.json'
    - 'appspec.yaml'
